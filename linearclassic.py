# Linear Regression - стандартная версия
import datetime as dt
import yfinance as yf
from sklearn.linear_model import LinearRegression

# datetime - это встроенный модуль Python для работы с датами и временем.
# yfinance - библиотека Python, позволяет загружать данные с Yahoo Finance API. yf - это псевдоним позволяющий коротко обращатся к библиотеке, используется для загрузки данных с Yahoo Finance, например, data = yf.download('AAPL', start='2020-01-01', end='2022-12-31')
# sklearn - это библиотека для машинного обучения в Python. linear_model - модуль, содержащий алгоритмы линейной регрессии. LinearRegression - это класс, который реализует алгоритм линейной регрессии. Эта строка кода импортирует класс LinearRegression, что позволяет использовать его в вашем коде, например, lr = LinearRegression().

# Функция для загрузки исторических данных торгового актива. 
# Эта часть кода определяет функцию которая загружает данные о цене торгового актива с Yahoo Finance по заданному коду актива и диапазону дат.
def download_ticker_data(ticker_code, start_date, end_date):
    try:
        ticker_data = yf.download(ticker_code, start=start_date, end=end_date)
        return ticker_data
    except Exception as ex:
        print(f'Ошибка при загрузке данных для {ticker_code}: {ex}')
        return None
    
# def - ключевое слово, используется для определения функции в Python.
# download_ticker_data - имя функции, которое описывает ее цель.
# (ticker_code, start_date, end_date) - список параметров, которые функция принимает:
# ticker_code - строка, содержащая код актива (например, 'AAPL' для Apple Inc.).
# ticker_date - строка в формате 'YYYY-MM-DD', представляющая начальную дату диапазона данных.
# end_date - строка в формате 'YYYY-MM-DD', представляющая конечную дату диапазона данных.
# try - блок кода, для выполнения конкретной операции, которая может вызвать исключение (ошибку). В данном случае, попытка загрузить данные с Yahoo Finance может вызвать исключение, если код актива недействителен, данные недоступны или произошла другая ошибка.
# ticker_data - это переменная, которая будет содержать данные о цене актива в виде объекта DataFrame pandas.
# yf.download() - функция из библиотеки yfinance, которая загружает данные о цене актива из Yahoo Finance по заданному коду актива и диапазону дат.
# return - лючевое слово, которое используется для возврата значения из функции. ticker_data - это значение, которое возвращается из функции. Если данные были успешно загружены, то функция возвращает объект DataFrame pandas, содержащий данные о цене актива.
# except - блок кода, который обрабатывает исключения (ошибки), которые были вызваны в блоке try. Exception as e - это переменная e, которая содержит объект исключения (ошибки), если произошло исключение в блоке try.
# print() - функция, которая выводит текст в консоль. f'Ошибка при загрузке данных для {ticker_code}: {ex}' - это форматированная строка, которая выводит сообщение об ошибке вместе с кодом актива и описанием ошибки.
# Если произошла ошибка при загрузке данных, то функция возвращает None, чтобы указать на то, что данные не были загружены успешно.

# Функция для прогнозирования цены актива определяет функцию predict_ticker_price, которая пытается предсказать цену актива на заданную будущую дату с помощью линейной регрессии. Давайте рассмотрим каждую строчку кода
def predict_ticker_price(ticker_data, future_date):
# (ticker_data, future_date) - это список параметров, которые функция принимает: stock_data - это объект DataFrame pandas, содержащий данные о цене актива с датами и другими метриками. future_date - это строка в формате 'YYYY-MM-DD', представляющая дату, на которую нужно предсказать цену актива.

    ticker_data.reset_index(inplace=True)
# reset_index(inplace=True) - это метод DataFrame pandas, который сбрасывает индекс текущего DataFrame и делает его столбцом с именем 'index'. inplace=True означает, что изменения применяются к текущему DataFrame, а не возвращаются в виде нового DataFrame.

    ticker_data['Date_ordinal'] = ticker_data['Date'].map(dt.datetime.toordinal)
# Date_ordinal - это новое имя столбца, которое будет создано в DataFrame.dt.datetime.
# toordinal - это функция, которая преобразует дату в юлианскую дату (ordinal date), представляющую количество дней, прошедших с начала нашей эры.
# map() - это метод Series pandas, который применяет функцию к каждому элементу серии и возвращает новую серию с результатами. Эта строка кода создает новый столбец 'Date_ordinal' в DataFrame stock_data, содержащий юлианские даты для каждой даты в столбце 'Date'.
    future_date_ordinal = dt.datetime.strptime(future_date, '%Y-%m-%d').toordinal()
# dt.datetime.strptime(future_date, '%Y-%m-%d'): Преобразует строку future_date в объект datetime, используя формат 'ГГГГ-ММ-ДД'. Результат - это объект datetime, который представляет собой дату и время.
# .toordinal(): Преобразует объект datetime в числовой формат, называемый "дни ordinal". Каждый день считается отсчетом от эпохи Unix (1 января 1970 года), и каждый день имеет уникальное число ordinal. Результат - это число, представляющее день future_date в формате ordinal.
# В результате, переменная future_date_ordinal будет содержать число ordinal для даты, представленной в строке future_date.

    X = ticker_data['Date_ordinal'].values.reshape(-1, 1)
# ticker_data['Date_ordinal'].values: Извлекает столбец 'Date_ordinal' из DataFrame ticker_data и возвращает его в виде массива NumPy reshape(-1, 1): Изменяет форму массива NumPy. Аргумент -1 означает, что число элементов в первой размерности массива останется прежним, а 1 означает, что массив будет преобразован в массив столбцов. В результате получается массив, у которого одна размерность равна 1, а другая равна числу элементов в исходном массиве.
# Таким образом, строка кода преобразует столбец 'Date_ordinal' DataFrame ticker_data в массив столбцов и присваивает результат переменной X. Это часто используется в машинном обучении для подготовки данных к обучению, когда входные данные должны быть в виде массива столбцов.   
    Y = ticker_data['Close'].values.reshape(-1, 1)  # Predicting 'Close' price
# Эта строка кода выполняет ту же операцию, что и предыдущая, но со столбцом 'Close' DataFrame ticker_data вместо столбца 'Date_ordinal'.
# ticker_data['Close'].values: Извлекает столбец 'Close' из DataFrame ticker_data и возвращает его в виде массива NumPy.
# .reshape(-1, 1): Изменяет форму массива NumPy, чтобы получить массив столбцов.
# Таким образом, строка кода преобразует столбец 'Close' DataFrame ticker_data в массив столбцов и присваивает результат переменной Y. В контексте машинного обучения, переменная Y часто используется для хранения целевого переменного, которое модель пытается предсказать. В данном случае, Y содержит цены закрытия акций, которые модель может использовать для обучения и предсказания.
    model = LinearRegression()
# # model - это переменная, которая содержит экземпляр класса LinearRegression из библиотеки sklearn.linear_model.
    model.fit(X, Y)
# model.fit(X, Y) - это метод, который обучает модель линейной регрессии на данных из DataFrameX и Y.
    predicted_price = model.predict([[future_date_ordinal]])[0]
# predicted_price - это переменная, которая содержит предсказанную цену актива на заданную будущую дату.
# model.predict([[future_date_ordinal]]) - это метод, который предсказывает цену актива на заданную будущую дату с помощью обученной модели линейной регрессии.
# [0] - это индекс, который извлекает первое значение из массива, возвращаемого методом predict().

    prediction_score = model.score(X, Y)
# prediction_score - это переменная, которая содержит коэффициент детерминации для данной модели линейной регрессии.
# model.score(X, Y) - это метод, который возвращает коэффициент детерминации (R^2 score), который измеряет, насколько хорошо модель линейной регрессии объясняет зависимую переменную (цену акции) с помощью независимой переменной (юлианских дат).
    return predicted_price, prediction_score
# return - это ключевое слово, которое используется для возврата значения из функции.
# predicted_price, prediction_score - это кортеж, который содержит предсказанную цену актива на заданную будущую дату и коэффициент детерминации для данной модели линейной регрессии.

tickers = ('AAPL', 'EURUSD=X', 'GOLD',  'BTC-USD') # выбор торгового актива
start_date = '2020-01-01' # начальная дата для анализа
end_date = '2024-01-01' # конечная дата для анализа
future_date = '2026-01-01' # будущая дата для прогноза цены

# Теперь перейдем к вывод результатов для каждой актива. Часть кода котоую мы разберем является циклом for, который перебирает список актива и для каждого актива выполняет определенные действия:
for ticker_code in tickers:
# ticker_code - это переменная, которая принимает значение текущего кода актива в списке tickers на каждой итерации цикла.
# tickers - это список, содержащий коды активов, которые нужно проанализировать.
    ticker_code = ticker_code.strip()
# strip() - это метод строки в Python, который удаляет все пробелы в начале и конце строки. Эта строка кода удаляет любые лишние пробелы в коде актива, чтобы избежать ошибок при загрузке данных.
    ticker_data = download_ticker_data(ticker_code, start_date, end_date)
# download_ticker_data() - это функция, определенная ранее, которая загружает данные о цене актива с Yahoo Finance по заданному коду актива и диапазону дат.

    if ticker_data is not None:
# Эта строка кода проверяет, были ли успешно загружены данные о цене актива. Если данные не были загружены (например, из-за ошибки при загрузке данных), то stock_data будет равно None, и цикл продолжит следующую итерацию без дальнейшей обработки.
        predicted_price, prediction_score = predict_ticker_price(ticker_data, future_date)
# predict_stock_price() - это функция, определенная ранее, которая предсказывает цену актива на заданную будущую дату с помощью линейной регрессии.
# predicted_price - это переменная, которая содержит предсказанную цену актива на заданную будущую дату.
# predicted_price - это переменная, которая содержит предсказанную цену актива на заданную будущую дату.

        print(f'Предсказанная цена для {ticker_code} на {future_date}: {float(predicted_price[0]):.5f} с {prediction_score * 100:.2f}% доверием\n')
# Эта строка кода выводит на печать строковый формат, содержащий информацию о предсказанной цене актива и уровне доверия к этому предсказанию. Давайте разберемся, что делает каждая часть этой строки:
# f'Предсказанная цена для {ticker_code} на {future_date}: {float(predicted_price[0]):.5f} с {prediction_score * 100:.2f}% доверием\n': Это так называемая "строковая интерполяция" или "ф-строка" в Python, которая позволяет вставлять значения переменных в строку, используя фигурные скобки {}.
# ticker_code: Это переменная, содержащая код актива, для которой было сделано предсказание.
# future_date: Это переменная, содержащая дату, для которой было сделано предсказание.
# float(predicted_price[0]):.5f: Это предсказанная цена актива, полученная из массива
